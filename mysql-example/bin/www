#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mysql-example:server');
var httpServer = require('http');
var http = require('https');
var mysql = require('mysql');
const sslConfig = require('../ssl-config');
const options = {
	key: sslConfig.privateKey,
	cert: sslConfig.certificate,
	passphrase: 'gksmf92'
};

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
//app.set('https://localhost', url);

/**
 * Create HTTP server.
 */

var httpServer = httpServer.createServer(app);
var server = http.createServer(options, app);

// Socket io Setting.
var ioServer = require('socket.io');
var io = new ioServer();
io.attach(httpServer);
httpServer.listen(3001);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

let client = mysql.createConnection({
        user:"root",
        password:"gksmf92",
        database:"my_db"
})

io.sockets.on('connection', function(socket) {
	console.log('Connectioned!');

//	client.query("SELECT * FROM testMessage;", function(err, rows, cols) {
//		if(err) {
//			console.log(err);
//		}
//		else {
//			console.log(rows);
//			socket.emit('first', rows);
//		}
//	});		
	
	socket.on('chat', function(data) {
		console.log(data)
	});

	socket.on('first', function() {
		client.query("SELECT * FROM testMessage;", function(err, rows, cols) {
			if(err) {
				console.log(err);
			}
			else {
				console.log(rows);
				socket.emit('first', rows);
			}
		});
	});	
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
